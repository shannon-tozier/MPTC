---
title: "Week_04_Reading"
format: html
---

```{r}
library(tidyverse)
library(palmerpenguins)
library(ggthemes)
```

# 1

```{r}
penguins <- penguins
```

```{r}
ggplot(penguins,
       aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(title = "Body Mass and Flipper Length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Flipper length (mm)", 
       y = "Body mass (g)",
       color = "Species",
       shape = "Species",
       caption = "Data come from the palmerpenguins package.") +
  scale_color_colorblind()
```

## 1.2.5

1.  344 rows in penguins, 8 columns.

2.  bill_depth_mm is a measurement of bill depth in millimeters.

3.  

    ```{r}
    ggplot(penguins,
           aes(x = bill_length_mm, y = bill_depth_mm, 
               shape = species, color = species)) +
      geom_point() +
      geom_smooth(method = "lm") +
      labs(title = "Bill Length and Depth",
           subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
           x = "Bill Length (mm)", 
           y = "Bill Depth (mm)",
           color = "Species",
           shape = "Species",
           caption = "Data come from the palmerpenguins package.") +
      scale_color_colorblind()
    ```

    The data shows a positive linear relationship between bill length and depth, however this relationship exists within the subcategories of species.

4.  

    ```{r}
    ggplot(penguins,
           aes(x = species, y = bill_depth_mm)) +
      geom_point(aes(color = species, shape = species)) +
      geom_smooth(method = "lm") +
      labs(title = "Species and Bill Depth",
           x = "Species", 
           y = "Bill Depth (mm)",
           color = "Species",
           shape = "Species",
           caption = "Data come from the palmerpenguins package.") +
      scale_color_colorblind()
    ```

    Because species is categorical, a scatterplot does not work well. This would work much better as a boxplot.

    ```{r}
    ggplot(penguins,
           aes(x = species, y = bill_depth_mm)) +
      geom_boxplot(aes(color = species, shape = species)) +
      geom_smooth(method = "lm") +
      labs(title = "Species and Bill Depth",
           x = "Species", 
           y = "Bill Depth (mm)",
           color = "Species",
           shape = "Species",
           caption = "Data come from the palmerpenguins package.") +
      scale_color_colorblind()
    ```

5.   You need an aes mapping inside the ggplot function.

6.  NA values are always removed, but changing the na.rm to true instead of the false default will silence the warnings about missing values.

7.   \[see above\]

8.  

    ```{r}
    ggplot(penguins,
           aes(x = flipper_length_mm, y = body_mass_g)) +
      geom_point(aes(color = bill_depth_mm)) +
      geom_smooth() +
      labs(title = "Flipper Length and Body Mass",
           subtitle = "Dimension for Bill Depth",
           x = "Flipper Length (mm)", 
           y = "Body Mass (g)",
           color = "Bill Depth (mm)",
           caption = "Data come from the palmerpenguins package.")
    ```

    Bill depth should be mapped to color at the geom level.

9.  

    ```{r}
    ggplot(
      data = penguins,
      mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)
    ) +
      geom_point() +
      geom_smooth(se = FALSE)
    ```

    This code makes a plot with individual curvy lines for each island with no gray area representing the standard deviation.

10. 

    ```{r}
    ggplot(
      data = penguins,
      mapping = aes(x = flipper_length_mm, y = body_mass_g)
    ) +
      geom_point() +
      geom_smooth()

    ggplot() +
      geom_point(
        data = penguins,
        mapping = aes(x = flipper_length_mm, y = body_mass_g)
      ) +
      geom_smooth(
        data = penguins,
        mapping = aes(x = flipper_length_mm, y = body_mass_g)
      )
    ```

    No , the plots don't look different because the global instructions in the first plot are just individually fed to each geom for the second plot.

## 1.4.3

1.  

    ```{r}
    ggplot(penguins, aes(y = species)) +
      geom_bar()
    ```

    The plot goes sideways.

2.  

    ```{r}
    ggplot(penguins, aes(x = species)) +
      geom_bar(color = "red")

    ggplot(penguins, aes(x = species)) +
      geom_bar(fill = "red")
    ```

    The color command only outlines the bars in red, while the fill command actually makes the bars red.

3.  The bins argument lets you change the number of bins the data is divided into.

4.  

    ```{r}
    diamonds <- diamonds
    ```

    ```{r}
    ggplot(diamonds, aes(x = carat)) +
      geom_histogram(binwidth = 0.01)
    ```

    There are peaks at the even tenths values. (approx).

## 1.5.5

1.  

    ```{r}
    mpg <- mpg
    ```

    You can use the "class()" function on variables to see if they are numeric or categorical.

2.  

    ```{r}
    ggplot(mpg,
           aes(x = hwy, y = displ)) +
      geom_point(aes(color = cty)) +
      geom_smooth(method = "lm") +
      labs(title = "Highway MPG and Engine Displacement",
           x = "Highwway MPG", 
           y = "Engine Displacement (litres)",
           color = "City MPG")

    ggplot(mpg,
           aes(x = hwy, y = displ)) +
      geom_point(aes(size = cty)) +
      geom_smooth(method = "lm") +
      labs(title = "Highway MPG and Engine Displacement",
           x = "Highwway MPG", 
           y = "Engine Displacement (litres)",
           size = "City MPG")

    ggplot(mpg,
           aes(x = hwy, y = displ)) +
      geom_point(aes(color = cty, size = cty)) +
      geom_smooth(method = "lm") +
      labs(title = "Highway MPG and Engine Displacement",
           x = "Highwway MPG", 
           y = "Engine Displacement (litres)",
           color = "City MPG",
           size = "City MPG")

    ggplot(mpg,
           aes(x = hwy, y = displ)) +
      geom_point(aes(shape = cty)) +
      geom_smooth(method = "lm") +
      labs(title = "Highway MPG and Engine Displacement",
           x = "Highwway MPG", 
           y = "Engine Displacement (litres)",
           shape = "City MPG")
    ```

    Color is a gradient for numeric, just different colors for categorical. Shape only works for categorical (or discrete), not for continuous variables.

3.  

    ```{r}
    ggplot(mpg,
           aes(x = hwy, y = displ)) +
      geom_point(aes(color = cty)) +
      geom_smooth(method = "lm", aes(linewidth = fl)) +
      labs(title = "Highway MPG and Engine Displacement",
           x = "Highwway MPG", 
           y = "Engine Displacement (litres)",
           color = "City MPG")
    ```

    It makes lines of different lengths for the different values of fl and gets very ugly.

4.  idk what this question means.

5.  

    ```{r}
    ggplot(penguins,
           aes(x = bill_length_mm, y = bill_depth_mm, 
               shape = species, color = species)) +
      geom_point() +
      geom_smooth(method = "lm") +
      labs(title = "Bill Length and Depth",
           subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
           x = "Bill Length (mm)", 
           y = "Bill Depth (mm)",
           color = "Species",
           shape = "Species",
           caption = "Data come from the palmerpenguins package.") +
      scale_color_colorblind()

    ggplot(penguins,
           aes(x = bill_length_mm, y = bill_depth_mm, 
               shape = species, color = species)) +
      geom_point() +
      geom_smooth(method = "lm") +
      facet_wrap(~species) +
      labs(title = "Bill Length and Depth",
           subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
           x = "Bill Length (mm)", 
           y = "Bill Depth (mm)",
           color = "Species",
           shape = "Species",
           caption = "Data come from the palmerpenguins package.") +
      scale_color_colorblind()
    ```

    You can see the trend differences between the species. Coloring keeps them all in one plot while faceting makes a plot for each species.

6.  

    ```{r}
    ggplot(
      data = penguins,
      mapping = aes(
        x = bill_length_mm, y = bill_depth_mm, 
        color = species, shape = species
      )
    ) +
      geom_point() +
      labs(color = "Species")
    ```

    To make it one legend instead of two, you also need to specify shape = Species in the labs argument.

7.  

    ```{r}
    ggplot(penguins, aes(x = island, fill = species)) +
      geom_bar(position = "fill")
    ggplot(penguins, aes(x = species, fill = island)) +
      geom_bar(position = "fill")
    ```

    The first helps you see what proportion of each island is each species, while the second shows what proportion of each species is on each island.

# 2

## 2.5

1.  

    ```{r}
    my_variable <- 10
    my_varıable
    #> Error: object 'my_varıable' not found
    ```

    Those are two different characters for the i.

2.  

    ```{r}
    libary(todyverse)

    ggplot(dTA = mpg) + 
      geom_point(maping = aes(x = displ y = hwy)) +
      geom_smooth(method = "lm)
    ```

    ```{r}
    libary(tidyverse)

    ggplot(data = mpg) + 
      geom_point(mapping = aes(x = displ, y = hwy)) +
      geom_smooth(method = "lm")
    ```

3.  Alt + Shift + K opens a menu of all of the keyboard shortcuts.

4.  I don't want to save things

# 3

```{r}
library(nycflights13)

flights <- flights
```

## 3.2.5

1.  

    ```{r}
    flights |> 
      filter(arr_delay >= 120)

    flights |> 
      filter(dest == "IAH" | dest == "HOU")

    flights |> 
      filter(carrier %in% c("UA", "AA", "DL"))

    flights |> 
      filter(month %in% c(7, 8, 9))

    flights |> 
      filter(arr_delay >= 120 & dep_delay <= 0)

    flights |> 
      filter(dep_delay >= 60 & arr_delay <= 30)
    ```

2.  
